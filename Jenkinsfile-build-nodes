library("tdr-jenkinslib")

def version = "v${env.BUILD_NUMBER}"
def isSandboxEcr = params.ECR_REPOSITORY == "sandbox"
def isJenkinsParentNode = (params.JENKINS_NODE == "jenkins" || params.JENKINS_NODE == "jenkins-prod")
def account = isSandboxEcr ? "${env.SANDBOX_ACCOUNT}" : "${env.MANAGEMENT_ACCOUNT}"
def imageName = isJenkinsParentNode ? "${params.JENKINS_NODE}" : "jenkins-build-${params.JENKINS_NODE}"
def ecrRoot = "${account}.dkr.ecr.eu-west-2.amazonaws.com"
def imageTag = isSandboxEcr ? "${ecrRoot}/sandbox_ecr_repository:${imageName}"
        : "${ecrRoot}/${imageName}:${version}"
def dockerFileName = params.JENKINS_NODE == "jenkins-prod" ? "Dockerfile-prod" : "Dockerfile"

pipeline {
  agent {
    label "built-in"
  }
  parameters {
    string(
      name: 'BRANCH',
      defaultValue: 'master',
      description: 'The branch to build from, defaults to master branch if not specified')
    choice(
      name: 'ECR_REPOSITORY',
      choices: ['sandbox', 'mgmt'],
      description: 'Sets the ECR repository to push to.'
    )
    choice(
      name: 'JENKINS_NODE',
      choices: ['aws', 'jenkins', 'jenkins-prod', 'npm', 'plugin-updates', 'postgres', 'terraform', 'transfer-frontend'],
      description: 'The Jenkins node image you wish to build')
    }
    stages {
      stage('Build image node') {
        steps {
          script {
            //Docker files are located in different directories
            if (isJenkinsParentNode) {
              dir("./docker") {
                sh "docker build -f ${dockerFileName} --pull --no-cache -t ${imageTag} ."
              }
            } else {
              //Child node Docker files rely on script in the 'nodes' directory therefore requires different docker build command to build from the parent directory
              dir("./docker/nodes") {
                sh "docker build -f ${params.JENKINS_NODE}/${dockerFileName} --pull --no-cache -t ${imageTag} ."
              }
            }
          }
        }
      }
      stage('Push node image to ECR') {
        steps {
          script {
            sh "aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${account}.dkr.ecr.eu-west-2.amazonaws.com"
            sh "docker push ${imageTag}"
          }
        }
      }
      stage('Post build') {
        when {
          expression { !isSandboxEcr }
        }
        //To avoid duplicate Docker image tag "jenkins-prod:latest" on the Jenkins prod instance tag the built image with version number
        //Then retag as "latest" in ECR once the image has been pushed
        stages {
          stage('Tag image with "latest"') {
            steps {
              script {
                def manifest = sh(script: "aws ecr batch-get-image --region eu-west-2 --repository-name ${imageName} --image-ids imageTag=${version} --query 'images[].imageManifest' --output text", returnStdout: true).trim()
                sh "aws ecr put-image --region eu-west-2 --repository-name ${imageName} --image-tag latest --image-manifest '${manifest}'"
              }
            }
          }
        }
      }
    }
    post {
      always {
        sh "docker rmi ${imageTag}"
      }
      failure {
        script {
          if (params.BRANCH == "master") {
            tdr.postToDaTdrSlackChannel(colour: "danger",
              message: "*TDR Build Jenkins Node Images* :warning: The build for *${params.JENKINS_NODE}* image on ${params.BRANCH} has failed"
            )
          }
        }
      }
    }
  }

