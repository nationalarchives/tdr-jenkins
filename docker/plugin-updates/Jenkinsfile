library("tdr-jenkinslib")

def versionTag = "v${env.BUILD_NUMBER}"
pipeline {
  agent {
    ecs {
      inheritFrom 'plugin-updates'
    }
  }

  stages {
    stage('Test') {
      steps {
        script {
          def branch = "plugin-updates-${versionTag}"
          checkout scm
          sh 'plugin-updates'
          def diffExitCode = sh(script: "git diff --exit-code docker/plugins.txt", returnStatus: true)
          if(diffExitCode == 1) {
            sh 'git status'
            sh "git checkout -b ${branch}"
            sh 'git add docker/plugins.txt'
            def notes = sh(script: "cat pr-notes", returnStdout: true).trim()
            sh "git commit -m '${notes}'"
            sshagent(['github-jenkins']) {
              sh "git push -u origin plugin-updates-${versionTag}"
            }
            withCredentials([string(credentialsId: 'github-jenkins-api-key', variable: 'GITHUB_TOKEN')]) {
              sh 'gh pr create --fill'
            }
          } else {
            tdr.postToDaTdrSlackChannel(colour: "good",
              message: "*Jenkins plugin updates* : The plugin update job for Jenkins has run but found no updates"
            )
          }
        }
      }
    }
  }
  post {
    failure {
      script {
        tdr.postToDaTdrSlackChannel(colour: "danger",
            message: "*Jenkins plugin updates* :warning: The plugin update job for Jenkins has failed"
        )
      }
    }
  }
}
