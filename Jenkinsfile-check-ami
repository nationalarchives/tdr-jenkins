pipeline {
    agent {
        label "master"
    }
    parameters {
        choice(name: "STAGE", choices: ["intg", "staging", "prod"], description: "The stage you are deploying Terraform changes to")
    }
    stages {
        stage('Run Terraform build') {
            agent {
                ecs {
                    inheritFrom 'terraform'
                    taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRTerraformAssumeRole${params.STAGE.capitalize()}"
                }
            }
            stages {
                stage('Set up Terraform workspace') {
                    steps {
                        echo 'Initializing Terraform...'
                        sh "git clone https://github.com/nationalarchives/tdr-terraform-modules.git"
                        sh 'terraform init'
                    }
                }
                stage('Check for ami updates') {
                    steps {
                        echo 'Running Terraform plan...'
                        sh 'terraform plan -out terraform.out'
                        def isUpdate = sh(script: "terraform show -json terraform.out | jq -r '.resource_changes[] | select(.address==\"module.jenkins.aws_security_group.jenkins_alb_group\") | .change.actions[0] | contains(\"update\")'", returnStdout: true)
                        if(isUpdate == "true") {
                            echo "Is update"
                        } else {
                            echo "Is not update"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Deleting Jenkins workspace...'
            deleteDir()
        }
    }
}
